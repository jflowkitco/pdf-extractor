def extract_fields_from_text(text):
    prompt = f"""
You are an expert in reviewing commercial insurance documents. Your task is to extract critical insurance quote data from the text below. The document may include tables, narrative descriptions, or invoice-style line items.

‚ö†Ô∏è Read carefully and return all values, even if embedded in sentences or paired with notes (e.g., "$4,584 (plus applicable premium tax)"). If a field is not found, return "N/A".

üìÑ Extract and return the following fields:

- Insured Name
- Named Insured Type
- Mailing Address
- Property Address
- Effective Date
- Expiration Date
- Premium (look in invoice sections, tables, and line items)
- Taxes (return even if noted as ‚Äúplus applicable premium tax‚Äù)
- Fees
- Total Insured Value
- Policy Number (can be near the top or embedded with carrier info)
- Coverage Type (e.g. Property, Liability, Umbrella)
- Carrier Name
- Broker Name
- Underwriting Contact Email
- Wind Deductible
- Hail Deductible
- Named Storm Deductible
- All Other Perils Deductible
- Deductible Notes
- Endorsements Summary (bullet list format)
- Exclusions Summary (bullet list format)

Return your results exactly in this format:

Insured Name: ...
Named Insured Type: ...
Mailing Address: ...
Property Address: ...
Effective Date: ...
Expiration Date: ...
Premium: ...
Taxes: ...
Fees: ...
Total Insured Value: ...
Policy Number: ...
Coverage Type: ...
Carrier Name: ...
Broker Name: ...
Underwriting Contact Email: ...
Wind Deductible: ...
Hail Deductible: ...
Named Storm Deductible: ...
All Other Perils Deductible: ...
Deductible Notes: ...
Endorsements Summary: ...
Exclusions Summary: ...

--- DOCUMENT START ---
{text[:7000]}
--- DOCUMENT END ---
"""
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        temperature=0
    )
    return response.choices[0].message.content
